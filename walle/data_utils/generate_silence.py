# -*- coding: utf-8 -*-
#########################################################################
# Initial software
# Copyright Nicolas Turpault, Romain Serizel, Justin Salamon, Ankit Parag Shah, 2019, v1.0
# This software is distributed under the terms of the License MIT
#########################################################################
import logging
import time
import argparse
import os.path as osp
import jams
import scaper
import glob
from pprint import pformat

from desed.utils import create_folder
from desed.post_process import post_process_txt_labels
from desed.Logger import create_logger


def delete_bg(jam_file):
    """ Modify the background SNR of a JAMS generated by scaper
    Args:
        new_snr: float, Sound to noise ratio (SNR) of the background from the reference
        jam_file: str, the name of the JAMS file to change the background SNR

    Returns:
        jams object that has been modified
    """
    jam_obj = jams.load(jam_file)
    data = jam_obj["annotations"][0].data
    for cnt, obs in enumerate(data):
        if obs.value["role"] == "background":
            # Changing manually the jams to have the snr desired
            del jam_obj["annotations"][0].data[cnt]

    return jam_obj


def generate_new_no_bg_files(in_dir, out_dir, fg_path=None, bg_path=None):
    """ Generate the new JAMS and audio files with a different background SNR
    Args:
        new_snr: float, Sound to noise ratio (SNR) of the background from the reference
        in_dir: str, folder containing JAMS file with background SNR to be changed
        out_dir: str, folder where to save the new audio and JAMS

    Returns:

    """
    logger = create_logger(__name__, "Desed.log")
    create_folder(out_dir)
    for jam_file in sorted(glob.glob(osp.join(in_dir, "*.jams"))):
        jams_obj = delete_bg(jam_file)
        out_jams = osp.join(out_dir, osp.basename(jam_file))
        jams_obj.save(out_jams)

        audiofile = osp.join(out_dir, osp.splitext(osp.basename(jam_file))[0] + ".wav")
        logger.debug(audiofile)
        scaper.generate_from_jams(out_jams, audiofile, fg_path, bg_path, jams_outfile=out_jams)


if __name__ == '__main__':
    dataset_path = osp.join("..", "..", "dataset")
    parser = argparse.ArgumentParser()
    parser.add_argument('--in_dir', type=str, default=osp.join(dataset_path, "audio", "train", "one_event_train"))
    parser.add_argument('--out_dir', type=str, default=osp.join(dataset_path, "audio", "train", "one_event_train_no_bg"))
    parser.add_argument('--outtsv', type=str,
                        default=osp.join(dataset_path, "metadata", "train", "one_event_train_no_bg.tsv"))
    parser.add_argument('--soundbank_dir', type=str, default=None)
    args = parser.parse_args()
    pformat(vars(args))

    fg_path = None
    bg_path = None
    if args.soundbank_dir is not None:
        fg_path = osp.join(args.soundbank_dir, "foreground")
        bg_path = osp.join(args.soundbank_dir, "background")

    generate_new_no_bg_files(args.in_dir, args.out_dir, fg_path, bg_path)
    post_process_txt_labels(args.out_dir, wavdir=args.in_dir, output_folder=args.out_dir,
                                output_tsv=args.outtsv)
